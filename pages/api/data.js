import axios from 'axios';

let twitch_token = null;

async function getTwitchToken() {
  if (twitch_token) return twitch_token;

  const { data } = await axios.post(
    `https://id.twitch.tv/oauth2/token?client_id=${process.env.TWITCH_CLIENT_ID}&client_secret=${process.env.TWITCH_SECRET}&grant_type=client_credentials`
  );
  twitch_token = data.access_token;
  return twitch_token;
}

export default async function handler(req, res) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω DonationAlerts –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ–≥–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
    const daToken = process.env.DA_ACCESS_TOKEN;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–Ω–∞—Ç—ã –æ—Ç DonationAlerts
    const { data: donationsResponse } = await axios.get(
      'https://www.donationalerts.com/api/v1/alerts/donations',
      { headers: { Authorization: `Bearer ${daToken}` } }
    );

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–Ω–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    const recentDonations = donationsResponse.data.filter(donation => {
      const donationDate = new Date(donation.created_at);
      return donationDate >= oneWeekAgo;
    });

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–æ–Ω–∞—Ç—ã –ø–æ username –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É "üí∞"
    const aggregatedDonations = recentDonations.reduce((acc, { username, amount, currency }) => {
      if (!acc[username]) {
        acc[username] = { username, total: 0, currency, icon: 'üí∞' };
      }
      acc[username].total += amount;
      return acc;
    }, {});

    const topDonors = Object.values(aggregatedDonations).sort((a, b) => b.total - a.total);

    // –ü–æ–ª—É—á–∞–µ–º Twitch-—Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const twitchToken = await getTwitchToken();
    // –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TWITCH_USER_ID (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –Ω–∞ Vercel)
    const twitchUserId = process.env.TWITCH_USER_ID;
    const { data: subsResponse } = await axios.get(
      `https://api.twitch.tv/helix/subscriptions?broadcaster_id=${twitchUserId}`,
      {
        headers: {
          'Client-ID': process.env.TWITCH_CLIENT_ID,
          Authorization: `Bearer ${twitchToken}`
        }
      }
    );

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Twitch API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ subsResponse.data
    const subsData = subsResponse.data;

    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ–ª–µ is_gift –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    const giftedSubs = subsData
      .filter(sub => sub.is_gift)
      .map(sub => ({
        icon: 'üéÅ',
        user_name: sub.user_name,
        total: sub.total, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        type: 'gift'
      }));

    const selfSubs = subsData
      .filter(sub => !sub.is_gift)
      .map(sub => ({
        icon: 'üë§',
        user_name: sub.user_name,
        cumulative_months: sub.cumulative_months, // —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∞–Ω
        type: 'self'
      }));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return res.status(200).json({
      topDonors,    // –º–∞—Å—Å–∏–≤ –¥–æ–Ω–∞—Ç—ë—Ä–æ–≤ (—Å –∏–∫–æ–Ω–∫–æ–π üí∞)
      giftedSubs,   // –º–∞—Å—Å–∏–≤ –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (—Å –∏–∫–æ–Ω–∫–æ–π üéÅ)
      selfSubs      // –º–∞—Å—Å–∏–≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (—Å –∏–∫–æ–Ω–∫–æ–π üë§)
    });
  } catch (error) {
    console.error('Error in /api/data:', error.response?.data || error.message);
    return res.status(500).json({ error: error.message });
  }
}
